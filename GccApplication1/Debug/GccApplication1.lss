
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000be  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000112  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000112  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000144  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000627  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000055a  00000000  00000000  000007cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a1  00000000  00000000  00000d29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  00000fcc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000032f  00000000  00000000  0000101c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e6  00000000  00000000  0000134b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001431  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	1a c0       	rjmp	.+52     	; 0x38 <__vector_1>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	1d d0       	rcall	.+58     	; 0x6e <main>
  34:	42 c0       	rjmp	.+132    	; 0xba <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <__vector_1>:
#include <avr/interrupt.h>
#include <util/delay.h>


ISR(INT0_vect)
{
  38:	1f 92       	push	r1
  3a:	0f 92       	push	r0
  3c:	0f b6       	in	r0, 0x3f	; 63
  3e:	0f 92       	push	r0
  40:	11 24       	eor	r1, r1
  42:	2f 93       	push	r18
  44:	8f 93       	push	r24
  46:	9f 93       	push	r25
	PORTD |= (1 << 6);
  48:	96 9a       	sbi	0x12, 6	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  4a:	2f ed       	ldi	r18, 0xDF	; 223
  4c:	82 e2       	ldi	r24, 0x22	; 34
  4e:	92 e0       	ldi	r25, 0x02	; 2
  50:	21 50       	subi	r18, 0x01	; 1
  52:	80 40       	sbci	r24, 0x00	; 0
  54:	90 40       	sbci	r25, 0x00	; 0
  56:	e1 f7       	brne	.-8      	; 0x50 <__SREG__+0x11>
  58:	00 c0       	rjmp	.+0      	; 0x5a <__SREG__+0x1b>
  5a:	00 00       	nop
	_delay_ms(700);
	PORTD &= ~(1 << 6);
  5c:	96 98       	cbi	0x12, 6	; 18
}
  5e:	9f 91       	pop	r25
  60:	8f 91       	pop	r24
  62:	2f 91       	pop	r18
  64:	0f 90       	pop	r0
  66:	0f be       	out	0x3f, r0	; 63
  68:	0f 90       	pop	r0
  6a:	1f 90       	pop	r1
  6c:	18 95       	reti

0000006e <main>:
int main(void)
{
	
	
	
	DDRD |= (1 << 5)|(1 << 6)|(1 << 7);
  6e:	81 b3       	in	r24, 0x11	; 17
  70:	80 6e       	ori	r24, 0xE0	; 224
  72:	81 bb       	out	0x11, r24	; 17
	DDRB |= (1 << 0);
  74:	b8 9a       	sbi	0x17, 0	; 23
	
	DDRC &= ~((1 << 0)|(1 << 1)|(1 << 2)|(1 << 3));
  76:	84 b3       	in	r24, 0x14	; 20
  78:	80 7f       	andi	r24, 0xF0	; 240
  7a:	84 bb       	out	0x14, r24	; 20
	PORTC &= ~((1 << 0)|(1 << 1)|(1 << 2)|(1 << 3));
  7c:	85 b3       	in	r24, 0x15	; 21
  7e:	80 7f       	andi	r24, 0xF0	; 240
  80:	85 bb       	out	0x15, r24	; 21
	
	DDRD &= ~(1 << 2);
  82:	8a 98       	cbi	0x11, 2	; 17
	PORTD &= ~(1 << 2);
  84:	92 98       	cbi	0x12, 2	; 18
	MCUCR = (1 << ISC01)|(1 << ISC00)|(1 << ISC11)|(1 << ISC10);
  86:	8f e0       	ldi	r24, 0x0F	; 15
  88:	85 bf       	out	0x35, r24	; 53
	GICR = (1 << INT0);
  8a:	80 e4       	ldi	r24, 0x40	; 64
  8c:	8b bf       	out	0x3b, r24	; 59
	
	sei();
  8e:	78 94       	sei
	
    while (1) 
    {
		
		
		PORTD |= (1 << 5);
  90:	95 9a       	sbi	0x12, 5	; 18
  92:	2f e9       	ldi	r18, 0x9F	; 159
  94:	86 e8       	ldi	r24, 0x86	; 134
  96:	91 e0       	ldi	r25, 0x01	; 1
  98:	21 50       	subi	r18, 0x01	; 1
  9a:	80 40       	sbci	r24, 0x00	; 0
  9c:	90 40       	sbci	r25, 0x00	; 0
  9e:	e1 f7       	brne	.-8      	; 0x98 <main+0x2a>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <main+0x34>
  a2:	00 00       	nop
		_delay_ms(500);
		PORTD &=~ (1 << 5);
  a4:	95 98       	cbi	0x12, 5	; 18
  a6:	2f e9       	ldi	r18, 0x9F	; 159
  a8:	86 e8       	ldi	r24, 0x86	; 134
  aa:	91 e0       	ldi	r25, 0x01	; 1
  ac:	21 50       	subi	r18, 0x01	; 1
  ae:	80 40       	sbci	r24, 0x00	; 0
  b0:	90 40       	sbci	r25, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <main+0x3e>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <main+0x48>
  b6:	00 00       	nop
  b8:	eb cf       	rjmp	.-42     	; 0x90 <main+0x22>

000000ba <_exit>:
  ba:	f8 94       	cli

000000bc <__stop_program>:
  bc:	ff cf       	rjmp	.-2      	; 0xbc <__stop_program>
